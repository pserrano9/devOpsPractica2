---
- name: 'aks'
  hosts: webservers
  remote_user: adminUsername
  become: true
  vars_files:
    - vars/02_vars.yaml

  tasks:
    - name: 'Definir los objectos deployment y servicios'
      template:
        src: templates/stateless.j2
        dest: "{{ directorio_trabajo }}/{{ aplicacion.definicion }}"

    - name: 'Crear el namespace de trabajo'
      kubernetes.core.k8s:
        kind: Namespace
        name: "{{ k8s_namespace }}"

    - name: 'Crear Deployments y servicios de la aplicación'
      kubernetes.core.k8s:
        state: present
        template: "{{ directorio_trabajo }}/{{ aplicacion.definicion }}"
        
    - name: 'Creamos un directorio de trabajo'
      command: mkdir aks
      ignore_errors: True

    # Instalamos el cliente de AKS
    - name: 'Instalar AKS Cli - Paso 1'
      command: sudo curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      ignore_errors: True
      
    - name: 'Instalar AKS Cli - Paso 2'
      command: sudo chmod +x ./kubectl
      ignore_errors: True
      
    - name: 'Instalar AKS Cli - Paso 3'
      command: sudo mv ./kubectl /usr/local/bin/kubectl
      ignore_errors: True
      
    # Instalamos el cliente de Azure
    - name: 'Instalar AZ Cli - Paso 1'
      command: sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
      ignore_errors: True
      
    - name: 'Instalar AZ Cli - Paso 2'
      command: sudo sh -c 'echo -e \N"[azure-cli]\Nnombre=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/azure-cli.repo'
      ignore_errors: True
      
    - name: 'Instalar AZ Cli - Paso 3'
      command: yum check-update
      ignore_errors: True
      
    - name: 'Instalar AZ Cli - Paso 4'
      command: sudo yum install -y azure-cli
      ignore_errors: True
    # Descargamos una aplicación de ejemplo  
    #- git:
      #repo: https://github.com/Azure-Samples/azure-voting-app-redis.git
      #dest: /aks
      #archive: /tmp/ansible-examples.zip
      
      # sudo dnf -y install git
      
    #- name: 'Copiamos el fichero yaml para desplegar la aplicación en AKS'
     # ansible.builtin.copy:
      #  src: configFiles/azure-vote-all-in-one-redis.yaml
       # dest: ./aks
        #mode: '0644'
        
    - name: 'Copiamos el fichero yaml para desplegar la aplicación en AKS'
      ansible.builtin.copy:
        src: configFiles/pvc-akshci-csi.yaml
        dest: ./aks
        mode: '0644'

    - name: 'Copiamos el fichero yaml para desplegar la aplicación en AKS'
      ansible.builtin.copy:
        src: configFiles/pvc-akshci-csi.yaml
        dest: ./aks
        mode: '0644'

    - name: 'Copiamos el fichero yaml para desplegar la aplicación en AKS'
      ansible.builtin.copy:
        src: configFiles/winwebserver.yaml
        dest: ./aks
        mode: '0644'     
            
    #- name: 'Generamos nuestra imagen de contenedor'
    #  command: sudo podman build -t webserveraks ./aks/azure-vote-all-in-one-redis

    #- name: 'Etiquetamos la imagen para subirla a ACR'
     # command: sudo podman tag localhost/webserveraks:latest acrdevopspablo.azurecr.io/webserveraks:casopractico2aks
      # sudo podman tag mcr.microsoft.com/azuredocs/azure-vote-front:v1 <acrLoginServer>/azure-vote-front:v1
      
    #- name: 'Nos autenticamos en ACR'
     # command: sudo podman login -u "{{ acr_admin_user }}" -p "{{ acr_admin_pass }}"  "{{ acr_host }}"
      
    #- name: 'Subimos la imagen a ACR'
    #  command: sudo podman push acrdevopspablo.azurecr.io/webserver:casopractico2aks
    
    - name: 'Conectamos con nuestro AKS'
      command: sudo az aks get-credentials --resource-group kubernetes_rg --name cluster 
      ignore_errors: True
   # - name: 'Desplegamos nuestra aplicación en AKS a partir de la imagen que tenemos en ACR'
    #  command: kubectl apply -f aks/azure-vote-all-in-one-redis.yaml

